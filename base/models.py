from django.db import models
from django.contrib.auth.models import User
from django.utils.timezone import now


class FlashcardDeck(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name


class Flashcard(models.Model):
    question = models.TextField()
    answer = models.TextField()
    deck = models.ForeignKey(FlashcardDeck, on_delete=models.CASCADE, related_name='flashcards')
    created_at = models.DateTimeField(auto_now_add=True)
    tags = models.CharField(max_length=255, blank=True, null=True)  # Example field for tags

class Review(models.Model):
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    stars = models.IntegerField()
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"Review by {self.user.username if self.user else 'Anonymous'}"
    
class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    bio = models.TextField(blank=True)
    
    
    def __str__(self):
        return self.user.username 

class StudyGroup(models.Model):
    name = models.CharField(max_length=200)
    description = models.TextField(null=True, blank=True)
    members = models.ManyToManyField(User, related_name='study_groups')
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='created_groups')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

class GroupMessage(models.Model):
    group = models.ForeignKey(StudyGroup, on_delete=models.CASCADE, related_name='messages')
    sender = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['created_at']

    def __str__(self):
        return f"{self.sender.username}: {self.content[:50]}"
    

class AiInteraction(models.Model):
    # Link to the user who initiated the interaction
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='ai_interactions')

    # Identifier for which section the interaction occurred in
    # (e.g., 'tutorials', 'study_guides', 'books', 'mood_survey')
    section = models.CharField(max_length=50, db_index=True)

    # The specific question asked to the user in the questionnaire
    question_text = models.TextField()

    # The user's submitted answer
    user_answer = models.TextField()

    # The response generated by the Gemini API
    ai_response = models.TextField(blank=True, null=True) # Can be blank initially or if API fails

    # Timestamp of when the interaction was created/saved
    # Uses 'now' directly from 'from django.utils.timezone import now'
    timestamp = models.DateTimeField(default=now)

    class Meta:
        ordering = ['-timestamp'] # Show newest interactions first by default

    def __str__(self):
        """String representation for the admin interface."""
        return f"{self.user.username} - {self.section} - {self.timestamp.strftime('%Y-%m-%d %H:%M')}"
    

class TimerSession(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='timer_sessions')
    duration_seconds = models.IntegerField()  # total time spent in seconds
    started_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.duration_seconds} seconds"

class LoginActivity(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='logins')
    login_date = models.DateField()

    class Meta:
        unique_together = ('user', 'login_date')

    def __str__(self):
        return f"{self.user.username} - {self.login_date}"
